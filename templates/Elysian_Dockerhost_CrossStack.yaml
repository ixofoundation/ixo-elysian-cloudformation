AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template instantiating an EC2 Instance
  for use with a previously created Cross-Stack Network stack
  utilization, exporting Instance
Parameters:
  NetworkStackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: Elysian-VPC-Subnet-Stack
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  AWSRegionArch2AMI:
    us-east-1:
      PV64: ami-8ff710e2
      HVM64: ami-f5f41398
      HVMG2: ami-4afd1d27
    us-west-2:
      PV64: ami-eff1028f
      HVM64: ami-d0f506b0
      HVMG2: ami-ee897b8e
    us-west-1:
      PV64: ami-ac85fbcc
      HVM64: ami-6e84fa0e
      HVMG2: ami-69106909
    eu-west-1:
      PV64: ami-23ab2250
      HVM64: ami-b0ac25c3
      HVMG2: ami-936de5e0
    eu-central-1:
      PV64: ami-27c12348
      HVM64: ami-d3c022bc
      HVMG2: ami-8e7092e1
    ap-northeast-1:
      PV64: ami-26160d48
      HVM64: ami-29160d47
      HVMG2: ami-91809aff
    ap-northeast-2:
      PV64: NOT_SUPPORTED
      HVM64: ami-cf32faa1
      HVMG2: NOT_SUPPORTED
    ap-southeast-1:
      PV64: ami-f3dd0a90
      HVM64: ami-1ddc0b7e
      HVMG2: ami-3c30e75f
    ap-southeast-2:
      PV64: ami-8f94b9ec
      HVM64: ami-0c95b86f
      HVMG2: ami-543d1137
    sa-east-1:
      PV64: ami-e188018d
      HVM64: ami-fb890097
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      PV64: ami-77a46e1a
      HVM64: ami-05a66c68
      HVMG2: NOT_SUPPORTED
Resources:
  EC2DockerhostInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - PrepareDocker
            - PrepareElysian
            - PreparePersistentFilesystem
            - DeployElysian
        PrepareDocker:
          packages:
            yum:
              docker: []
          users:
            "ec2-user":
              groups:
                - "docker"
          commands:
            docker-compose-get:
              command: "sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o docker-compose"
              cwd: "/usr/local/bin/"
            docker-compose-permissions:
              command: "sudo chmod +x docker-compose"
              cwd: "/usr/local/bin/"
            docker-compose-root:
              command: "ln -s /usr/local/bin/docker-compose docker-compose"
              cwd: "/bin"
            docker-compose-version:
              command: "docker-compose --version"
              cwd: "/home/ec2-user"
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        PrepareElysian:
          sources:
            "/home/ec2-user/ixo-pds-repository": "https://github.com/ixofoundation/ixo-pds/tarball/master"
          commands:
            create-deployment-dir:
              command: mkdir -p elysian/bin
              cwd: "/home/ec2-user"
            extract-docker-compose:
              command: cp ixo-pds-repository/docker-compose.yml elysian/
              cwd: "/home/ec2-user"
            extract-docker-compose-prod:
              command: cp ixo-pds-repository/docker-compose.prod.yml elysian/
              cwd: "/home/ec2-user"
            extract-elysian-scripts:
              command: cp ixo-pds-repository/bin/* elysian/bin
              cwd: "/home/ec2-user"
            remove-build-in-docker-compose:
              command: sed -i 's/build/# build/g' docker-compose.yml
              cwd: "/home/ec2-user/elysian"
            remove-repository:
              command: rm -rf ixo-pds-repository
              cwd: "/home/ec2-user"
        PreparePersistentFilesystem:
          commands:
            1_pvcreate:
              # create LVM physical volume
              command: pvcreate /dev/xvdf
            2_vgcreate:
              # create volume group
              command: vgcreate vg0 /dev/xvdf
            3_lvcreate:
              # create logical volume
              command: lvcreate -l 100%FREE -n elysian vg0
            4_mkfs:
              # create ext4 file system
              command: mkfs.ext4 /dev/vg0/elysian
            5_mkdir:
              # make the /var/app directory
              command: mkdir data
              cwd: "/home/ec2-user/elysian"
            6_fstab:
              # add the mount point to the /etc/fstab file so it will be mounted on system boot
              command: echo "/dev/mapper/vg0-elysian /home/ec2-user/elysian/data ext4 defaults 0 2" >> /etc/fstab
            7_mount:
              # mount the newly added logical volume to the /var/myapp directory
              command: mount -a
        DeployElysian:
          commands:
            docker-compose-elysian:
              command: ./start.sh prod
              cwd: "/home/ec2-user/elysian/bin"
              env:
                HOME: "/home/ec2-user/elysian"
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - HVM64
      KeyName:
        Ref: KeyName
      NetworkInterfaces:
        - GroupSet:
            - !ImportValue
              'Fn::Sub': '${NetworkStackName}-SecurityGroupID'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !ImportValue
            'Fn::Sub': '${NetworkStackName}-SubnetID'
# >>>
      BlockDeviceMappings:
        # Create a separate volume
        - DeviceName: /dev/sdf
          Ebs:
            DeleteOnTermination: true
            # Encrypted: true
            VolumeSize: 8
# <<<
      UserData:
        Fn::Base64: !Sub |
         #!/usr/bin/env bash
         set -o errexit
         yum -y update aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2DockerhostInstance --configsets All --region ${AWS::Region}
         /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource EC2DockerhostInstance --region ${AWS::Region}
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        # P is the duration designator (for period) placed at the start of the duration representation.
        # Y is the year designator that follows the value for the number of years.
        # M is the month designator that follows the value for the number of months.
        # W is the week designator that follows the value for the number of weeks.
        # D is the day designator that follows the value for the number of days.
        # T is the time designator that precedes the time components of the representation.
        # H is the hour designator that follows the value for the number of hours.
        # M is the minute designator that follows the value for the number of minutes.
        # S is the second designator that follows the value for the number of seconds.
  IPAddress:
    Type: 'AWS::EC2::EIP'
  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref EC2DockerhostInstance
      EIP: !Ref IPAddress
Outputs:
  URL:
    Description: URL at which public access is possible
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - EC2DockerhostInstance
          - PublicDnsName
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2DockerhostInstance
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref IPAddress
