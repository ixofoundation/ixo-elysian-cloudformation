AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation template instantiating an EC2 Instance
  for use with a previously created Cross-Stack Network stack
  utilization, exporting Instance
Parameters:
  NetworkStackName:
    Description: >-
      Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: Elysian-VPC-Subnet-Stack
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
Mappings:
  AWSRegionMap:
    us-east-1:
      HVM64: ami-f5f41398
    us-west-2:
      HVM64: ami-d0f506b0
    us-west-1:
      HVM64: ami-6e84fa0e
    eu-west-1:
      HVM64: ami-b0ac25c3
    eu-central-1:
      HVM64: ami-d3c022bc
    ap-northeast-1:
      HVM64: ami-29160d47
    ap-northeast-2:
      HVM64: ami-cf32faa1
    ap-southeast-1:
      HVM64: ami-1ddc0b7e
    ap-southeast-2:
      HVM64: ami-0c95b86f
    sa-east-1:
      HVM64: ami-fb890097
    cn-north-1:
      HVM64: ami-05a66c68
Resources:

  PersistentVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Delete
    Properties:
      AvailabilityZone: !ImportValue
        'Fn::Sub': '${NetworkStackName}-AvailabilityZone'
      Size: 4
      Tags:
        - Key: "Name"
          Value: !Join [ '-', [ !Ref 'AWS::StackName', 'PersistentVolume' ] ]
        - Key: "Stack"
          Value: !Ref 'AWS::StackName'

  EC2DockerhostInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            # - PrepareDocker
            # - PrepareElysian
            - PreparePersistentFilesystemLinkingScript
            # - DeployElysian
        PrepareDocker:
          packages:
            yum:
              docker: []
          users:
            "ec2-user":
              groups:
                - "docker"
          commands:
            docker-compose-get:
              command: "sudo curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m) -o docker-compose"
              cwd: "/usr/local/bin/"
            docker-compose-permissions:
              command: "sudo chmod +x docker-compose"
              cwd: "/usr/local/bin/"
            docker-compose-root:
              command: "ln -s /usr/local/bin/docker-compose docker-compose"
              cwd: "/bin"
            docker-compose-version:
              command: "docker-compose --version"
              cwd: "/home/ec2-user"
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        PrepareElysian:
          sources:
            "/home/ec2-user/ixo-pds-repository": "https://github.com/ixofoundation/ixo-pds/tarball/master"
          commands:
            create-deployment-dir:
              command: mkdir -p elysian/bin
              cwd: "/home/ec2-user"
            extract-docker-compose:
              command: cp ixo-pds-repository/docker-compose.yml elysian/
              cwd: "/home/ec2-user"
            extract-docker-compose-prod:
              command: cp ixo-pds-repository/docker-compose.prod.yml elysian/
              cwd: "/home/ec2-user"
            extract-elysian-scripts:
              command: cp ixo-pds-repository/bin/* elysian/bin
              cwd: "/home/ec2-user"
            remove-build-in-docker-compose:
              command: sed -i 's/build/# build/g' docker-compose.yml
              cwd: "/home/ec2-user/elysian"
            remove-repository:
              command: rm -rf ixo-pds-repository
              cwd: "/home/ec2-user"
        PreparePersistentFilesystemLinkingScript:
          files:
            # "/tmp/ensure-volume-filesystem.sh":
            #   content: !Sub |
            #     #!/bin/bash
            #
            #     X="$(sudo file -s /dev/xvdf)"
            #
            #     if [ "$X" = "/dev/xvdf: data" ]
            #     then
            #       sudo mkfs -t ext4 /dev/xvdf
            #     fi
            #   mode: '000777'
            #   owner: root
            #   group: root
            # # commands:
            # #   execute-mount-script:
            # #     command: ./ensure-volume-filesystem.sh
            # #     cwd: "/home/ec2-user"
            # #   trash-mount-script:
            # #     command: rm ensure-volume-filesystem.sh
            # #     cwd: "/home/ec2-user"
            "/tmp/wait-for-volume-and-format.sh":
              content: !Sub |
                #!/bin/bash -xe
                #
                # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html
                #
                # Make sure volume has been created AND attached to this instance !
                #
                # We do not need a loop counter in the "until" statements below because
                # there is a 5 minute limit on the CreationPolicy for this EC2 instance already.


                ######################################################################
                # Volume /dev/sdf (which will get created as /dev/xvdf on Amazon Linux)

                while [ ! -e /dev/sdf ];
                do
                  echo waiting for /dev/sdf to attach
                  sleep 5
                done

                # Format /dev/xvdf if it does not contain a partition yet
                if [ "$(file -b -s /dev/xvdf)" == "data" ]; then
                  mkfs -t ext4 /dev/xvdf
                fi

                mkdir -p /persistent-volume
                mount /dev/xvdf /persistent-volume

                # Persist the volume in /etc/fstab so it gets mounted again
                echo '/dev/xvdf /persistent-volume ext4 defaults,nofail 0 2' >> /etc/fstab
              mode: '000777'
              owner: root
              group: root
        DeployElysian:
          commands:
            docker-compose-elysian:
              command: ./start.sh prod
              cwd: "/home/ec2-user/elysian/bin"
              env:
                HOME: "/home/ec2-user/elysian"
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [AWSRegionMap, !Ref "AWS::Region", HVM64]
      KeyName:
        Ref: KeyName
      Monitoring: true
      NetworkInterfaces:
        - GroupSet:
            - !ImportValue
              'Fn::Sub': '${NetworkStackName}-SecurityGroupID'
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: true
          SubnetId: !ImportValue
            'Fn::Sub': '${NetworkStackName}-SubnetID'
      Volumes:
        - VolumeId: !Ref PersistentVolume
          Device: /dev/sdf
      UserData:
        Fn::Base64: !Sub |
         #!/usr/bin/env bash
         echo "in UserData"
         set -o errexit
         yum -y update aws-cfn-bootstrap
         /opt/aws/bin/cfn-init -v --resource EC2DockerhostInstance --configsets All --stack ${AWS::StackName} --region ${AWS::Region}

         whoami
         echo "111"
         lsblk
         echo "222"
         file -s /dev/xvdf
         # /home/ec2-user/ensure-volume-filesystem.sh
         echo "333"
         /tmp/wait-for-volume-and-format.sh
         echo "444"
         file -s /dev/xvdf
         echo "555"

         # rm /home/ec2-user/ensure-volume-filesystem.sh
         /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource EC2DockerhostInstance --region ${AWS::Region}
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: "Stack"
          Value: !Ref 'AWS::StackName'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        # P is the duration designator (for period) placed at the start of the duration representation.
        # Y is the year designator that follows the value for the number of years.
        # M is the month designator that follows the value for the number of months.
        # W is the week designator that follows the value for the number of weeks.
        # D is the day designator that follows the value for the number of days.
        # T is the time designator that precedes the time components of the representation.
        # H is the hour designator that follows the value for the number of hours.
        # M is the minute designator that follows the value for the number of minutes.
        # S is the second designator that follows the value for the number of seconds.
  IPAddress:
    Type: 'AWS::EC2::EIP'
  IPAssoc:
    Type: 'AWS::EC2::EIPAssociation'
    Properties:
      InstanceId: !Ref EC2DockerhostInstance
      EIP: !Ref IPAddress

Outputs:
  URL:
    Description: URL at which public access is possible
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - EC2DockerhostInstance
          - PublicDnsName
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref EC2DockerhostInstance
  InstanceIPAddress:
    Description: IP address of the newly created EC2 instance
    Value: !Ref IPAddress
